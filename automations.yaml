# Automatically listen for the hotword when Home Assistant starts.
- alias: "start hotword Automation"
  initial_state: true
  trigger:
    platform: homeassistant
    event: start
  action:
    - service: automation.turn_on
      data:
        entity_id: automation.command_success_automation
    - service: hotword_snowboy.listen

# Play a sound when the hotword is detected.
# Start listening for a command.
- alias: "Hotword Response Automation"
  initial_state: true
  trigger:
    platform: event
    event_type: hotword_detected
  action:
    - service: speech.speak
      data:
        message: "Diga"
        speech_rate: 100
    - service: stt_speech_recognition.listen
    # - service: stt_snowboy.detect_commands

# Play a sound when recording of a command has finished.
- alias: "Command Recorded Event Automation"
  initial_state: true
  trigger:
    platform: event
    event_type: speech_recorded
  action:
    - service: media_player.play_media
      data_template:
         entity_id: media_player.speaker
      data:
        entity_id: media_player.speaker
        media_content_id: /opt/cefetmg/data/etc/wav/command_recorded.wav
        media_content_type: 'music'


# Pass text from stt_snowboy to the intent recognizer.
- alias: "Intent recognition Automation"
  initial_state: true
  trigger:
    platform: event
    event_type: speech_to_text
  action:
    - service: intent_table.parse
      data_template:
        text: >
          {{ trigger.event.data.text }}
    - service: hotword_snowboy.listen


# triggers a boolean when a command is successfully parsed
- id: command_parsed_successfully
  initial_state: true
  alias: 'Command parsed Automation'
  trigger:
    platform: mqtt
    topic: "hass/successful_command"
    payload: "success"
  action:
  - service: input_boolean.turn_on
    data:
      entity_id: input_boolean.successful_command



# Say a funny message and triggers a boolean for 5 sec.
- id: command_success
  initial_state: true
  alias: 'Command Success Automation'
  trigger:
  - entity_id: input_boolean.successful_command
    from: 'off'
    platform: state
    to: 'on'
  action:
  - service: speech.speak
    data:
      speech_rate: 160
  - delay: 00:00:05
  - data:
      entity_id: input_boolean.successful_command
    service: input_boolean.turn_off
  - data:
      message: Command Success turned off
    service: persistent_notification.create


# Say that it didn't parsed command successfully.
- id: unknown_command
  initial_state: true
  alias: 'Unknown Command Automation'
  trigger:
    platform: mqtt
    topic: "hass/unknown_command"
    payload: "unknown_command"
  action:
    - service: speech.speak
      data:
        message: "Não Entendi."
        speech_rate: 120
    - delay: 00:00:05


# Increases speaker volume:
- id: increase_volume
  initial_state: true
  alias: 'Increase Volume Automation'
  trigger:
    platform: mqtt
    topic: "hass/speaker/volume"
    payload: 'increase'
  action:
    - service: media_player.volume_up
      data:
        entity_id: media_player.speaker
    - service: speech.speak
      data:
        message:
          - 'O volume'
          - 'foi alterado'

# Decreases speaker volume:
- id: decrease_volume
  initial_state: true
  alias: 'Decrease Volume Automation'
  trigger:
    platform: mqtt
    topic: "hass/speaker/volume"
    payload: 'decrease'
  action:
    - service: media_player.volume_down
      data:
        entity_id: media_player.speaker
    - service: speech.speak
      data:
        message:
          - 'O volume'
          - 'foi alterado'


# Informs about some item state
- id: ask_state_automation
  initial_state: true
  alias: 'RECEIVE STATE Automation'
  trigger:
    platform: mqtt
    topic: "hass/ask_state"
  action:
    - service: speech.speak
      data_template:
        message: |-
            {% if trigger.payload == "ON" %}
              {{ "Está ligado" }}
            {%- elif trigger.payload == "OFF" -%}
              {{ "Está desligado" }}
            {%- elif trigger.payload == "OPEN" -%}
              {{ "Está aberta" }}
            {%- else -%}
              {{ "Está fechada" }}
            {%- endif %}

# Says something when receives message in MQTT channel
- id: say_something
  initial_state: true
  alias: 'Say Something Automation'
  trigger:
    platform: mqtt
    topic: "hass/say"
  action:
    - service: speech.speak
      data_template:
        message: >
          {{ trigger.event.data.message }}
        speech_rate: |-
          {% if trigger.event.data.speech_rate %}
            {{trigger.event.data.speech_rate}}
          {% else %}
            {{ 120 }}
          {% endif %}

