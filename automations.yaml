# Automatically listen for the hotword when Home Assistant starts.
- alias: "start hotword"
  trigger:
    platform: homeassistant
    event: start
  action:
    service: hotword_snowboy.listen

# Play a sound when the hotword is detected.
# Start listening for a command.
- alias: "Hotword Response"
  trigger:
    platform: event
    event_type: hotword_detected
  action:
    - service: speech.speak
      data:
        message: "Diga"
    #- service: stt_speech_recognition.listen
    - service: stt_snowboy.detect_commands

# Play a sound when recording of a command has finished.
- alias: "Command Recorded Event"
  trigger:
    platform: event
    event_type: speech_recorded
  action:
    - service: media_player.play_media
      data_template:
         entity_id: media_player.speaker
      data:
        entity_id: media_player.speaker
        media_content_id: /opt/cefetmg/data/etc/wav/command_recorded.wav
        media_content_type: 'music'


# Pass text from stt_snowboy to the intent recognizer.
- alias: "Intent recognition"
  trigger:
    platform: event
    event_type: speech_to_text
  action:
    - service: intent_table.parse
      data_template:
        text: >
          {{ trigger.event.data.text }}
    - service: hotword_snowboy.listen


# triggers a boolean when a command is successfully parsed
- id: command_parsed_successfully
  alias: Command parsed
  trigger:
    platform: mqtt
    topic: "hass/successful_command"
  action:
  - service: input_boolean.turn_on
    data:
      entity_id: input_boolean.successful_command



# Say a funny message and triggers a boolean for 5 sec.
- id: command_success
  alias: command success automation
  trigger:
  - entity_id: input_boolean.successful_command
    from: 'off'
    platform: state
    to: 'on'
  action:
  - service: espeak_tts_success.tts_success
  - delay: 00:00:05
  - data:
      entity_id: input_boolean.successful_command
    service: input_boolean.turn_off
  - data:
      message: Command Success turned off
    service: persistent_notification.create


# Say that it didn't parsed command successfully.
- id: unknown_command
  alias: Command not parsed
  trigger:
    platform: mqtt
    topic: "hass/unknown_command"
  action:
    - service: speech.speak
      data:
        message: "Não Entendi."
    - delay: 00:00:05

# Informs about some item state
#- id: ask_state_automation
#  alias: ASK STATE Automation
#  trigger:
#    platform: mqtt
#    topic: "hass/ask_state"
#  action:
#    - service: mqtt.publish
#      data_template:
#        - payload: "Test message from HA"
#        - topic: {{ value_json.data }}

# MANDAR COMANDO MQTT PRO DISPOSITIVO
# ELE RETORNA E VAI TER DE TER OUTRA AUTOMAÇÃO
# PARA FALAR O NOME DO DISPOSITIVO E O ESTADO.
