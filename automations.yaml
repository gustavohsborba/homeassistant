# Automatically listen for the hotword when Home Assistant starts.
- alias: "start hotword"
  trigger:
    platform: homeassistant
    event: start
  action:
    service: hotword_snowboy.listen

# Play a sound when the hotword is detected.
# Start listening for a command.
- alias: "hotword -> speech to text"
  trigger:
    platform: event
    event_type: hotword_detected
  action:
    - service: speech.speak
      data:
        message: "Diga"
    - service: stt_snowboy.detect_commands
#    - service: stt_pocketsphinx.listen

# Play a sound when recording of a command has finished.
- alias: "speech to text working"
  trigger:
    platform: event
    event_type: speech_recorded
  action:
    - service: wav_aplay.play_wav
      data:
        filename: /opt/cefetmg/data/etc/wav/command_recorded.wav


# Pass text from pocketsphinx to the intent recognizer.
- alias: "speech to text -> intent recognition"
  trigger:
    platform: event
    event_type: speech_to_text
  action:
    - service: conversation.process
      data_template:
        text: "{{ trigger.event.data['text'] }}"
    - service: hotword_snowboy.listen

# Force stt_pocketsphinx to reload decoder after training
- alias: "Reload after training"
  trigger:
    platform: event
    event_type: rhasspy_trained
  action:
    - service: stt_pocketsphinx.reset


- id: led_state
  alias: MQTT LED state
  trigger:
    platform: mqtt
    topic: luz/status
  action:
  - service: persistent_notification.create
    data:
      message: 'Message Payload on luz/status: {{ states.sensor.luz.state }}'
  - service: input_boolean.turn_on
    data:
      entity_id: input_boolean.successful_command


- id: led_availability
  alias: MQTT LED availability
  trigger:
    platform: mqtt
    topic: luz/available
  action:
  - service: persistent_notification.create
    data:
      message: 'Message Payload on luz/available: {{ trigger.event }}'


- id: command_success
  alias: command success automation
  trigger:
  - entity_id: input_boolean.successful_command
    from: 'off'
    platform: state
    to: 'on'
  action:
  - service: espeak_tts_success.tts_success
  - delay: 00:00:05
  - data:
      entity_id: input_boolean.successful_command
    service: input_boolean.turn_off
  - data:
      message: Command Success turned off
    service: persistent_notification.create
